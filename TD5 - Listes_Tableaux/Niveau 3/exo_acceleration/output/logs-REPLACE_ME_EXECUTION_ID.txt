Nom de la variable de sortie: resultat-REPLACE_ME_EXECUTION_ID.json
Démarrage de l'exercice
Jeux de données: [{'name': 'Listes initiales', 'P': [1, 10, 20, 15, 17, 18, 20, 35, 36, 38, 39, 40, 40, 45], 'T': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'hidden': False, 'validation': False, 'resultat_utilisateur': '', 'correction': [[9.0, 10.0, -5.0, 2.0, 1.0, 2.0, 15.0, 1.0, 2.0, 1.0, 1.0, 0.0, 5.0], [1.0, -15.0, 7.0, -1.0, 1.0, 13.0, -14.0, 1.0, -1.0, 0.0, -1.0, 5.0]], 'impact': 14}, {'name': 'Jeu de données caché 1', 'P': [1, 10, 20, -15, 17, 18, 20, 35, 36, 38, 39, 40, 40, 45], 'T': [1, 2, 3, 4, 5, 6, 7.8, 8, 9, 10, 101, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'hidden': True, 'validation': False, 'resultat_utilisateur': '', 'correction': [[9.0, 10.0, -35.0, 32.0, 1.0, 1.1111111111111112, 74.99999999999993, 1.0, 2.0, 0.01098901098901099, -0.011235955056179775, 0.0, 5.0], [1.0, -45.0, 67.0, -31.0, 0.061728395061728426, 369.4444444444437, -73.99999999999993, 1.0, -0.021857263615505374, 0.000249718719608885, 0.011235955056179775, 5.0]], 'impact': 3}, {'name': 'Jeu de données caché 2', 'P': [1, 10, 20, 15, 17, 18, 20, 35, -360, 38, 39, 40, 410, 45], 'T': [1, 2, 3, 4, 0, 6, 7, 8, 9, 10, 11, 12, 0, 14, 15, 16, 17.0, 18.9, 19, 20], 'hidden': True, 'validation': False, 'resultat_utilisateur': '', 'correction': [[9.0, 10.0, -5.0, -0.5, 0.16666666666666666, 2.0, 15.0, -395.0, 398.0, 1.0, 1.0, -30.833333333333332, -26.071428571428573], [1.0, -15.0, -1.125, 0.1111111111111111, 1.8333333333333333, 13.0, -410.0, 793.0, -397.0, 0.0, 2.6527777777777777, 0.34013605442176853]], 'impact': 3}]
Code utilisateur: 
def velo_acc(input):
    P=input[0]
    T = input[1]
    velocities = []
    for i in range(1, len(P)):
        delta_P = P[i] - P[i - 1]  # Différence de position
        delta_T = T[i] - T[i - 1]  # Différence de temps
        if delta_T != 0:  # Éviter la division par zéro
            velocity = delta_P / delta_T
            velocities.append(velocity)


    accelerations = []
    for i in range(1, len(velocities)):
        delta_V = velocities[i] - velocities[i - 1]  # Différence de vitesse
        delta_T = T[i + 1] - T[i]  # Différence de temps
        if delta_T != 0:  # Éviter la division par zéro
            acceleration = delta_V / delta_T
            accelerations.append(acceleration)

    return [velocities, accelerations]

output=velo_acc((P,T))
print(output)

Exécution du code utilisateur pour le jeu de données Listes initiales
Résultat du code utilisateur: [[9.0, 10.0, -5.0, 2.0, 1.0, 2.0, 15.0, 1.0, 2.0, 1.0, 1.0, 0.0, 5.0], [1.0, -15.0, 7.0, -1.0, 1.0, 13.0, -14.0, 1.0, -1.0, 0.0, -1.0, 5.0]]
Validation réussie pour le jeu de données Listes initiales.
Exécution du code utilisateur pour le jeu de données Jeu de données caché 1
Résultat du code utilisateur: [[9.0, 10.0, -35.0, 32.0, 1.0, 1.1111111111111112, 74.99999999999993, 1.0, 2.0, 0.01098901098901099, -0.011235955056179775, 0.0, 5.0], [1.0, -45.0, 67.0, -31.0, 0.061728395061728426, 369.4444444444437, -73.99999999999993, 1.0, -0.021857263615505374, 0.000249718719608885, 0.011235955056179775, 5.0]]
Validation réussie pour le jeu de données Jeu de données caché 1.
Exécution du code utilisateur pour le jeu de données Jeu de données caché 2
Résultat du code utilisateur: [[9.0, 10.0, -5.0, -0.5, 0.16666666666666666, 2.0, 15.0, -395.0, 398.0, 1.0, 1.0, -30.833333333333332, -26.071428571428573], [1.0, -15.0, -1.125, 0.1111111111111111, 1.8333333333333333, 13.0, -410.0, 793.0, -397.0, 0.0, 2.6527777777777777, 0.34013605442176853]]
Validation réussie pour le jeu de données Jeu de données caché 2.
Fin de l'exercice
